import ajax from './ajax';
import css from './css';
import delay from './delay';
import jsonp from './jsonp';
import md5 from './md5';
import noop from './noop';
import numberFormat from './numberFormat';
import raf from './raf';
import randomString from './randomString';
import uuid from './uuid';
declare const _default: {
    base64: {
        decode: typeof import("./base64/decode").default;
        encode: typeof import("./base64/encode").default;
    };
    char: {
        isAlphabetic: (ch: any) => boolean;
        isAlphanumeric: (ch: any) => boolean;
        isASCII: (ch: any) => boolean;
        isCJK: (ch: any) => boolean;
        isControl: (ch: any) => boolean;
        isDigit: (ch: any) => boolean;
        isGraph: (ch: any) => boolean;
        isHexadecimal: (ch: any) => boolean;
        isLower: (ch: any) => boolean;
        isPrint: (ch: any) => boolean;
        isPunctuation: (ch: any) => boolean;
        isSpace: (ch: any) => boolean;
        isUpper: (ch: any) => boolean;
    };
    cookie: {
        isEnabled: typeof import("./cookie/isEnabled").default;
        get: typeof import("./cookie/get").default;
        getAll: typeof import("./cookie/getAll").default;
        getJson: typeof import("./cookie/getJson").default;
        getRaw: typeof import("./cookie/getRaw").default;
        set: typeof import("./cookie/set").default;
        setJson: typeof import("./cookie/setJson").default;
        setRaw: typeof import("./cookie/setRaw").default;
        remove: typeof import("./cookie/remove").default;
    };
    date: {
        diff: typeof import("./date/diff").default;
        format: (date: number | Date, format?: string, isUTC?: boolean) => string;
        timeAgo: import("./date/timeAgo").TimeAgo;
    };
    dom: {
        clientX: typeof import("./dom/clientX").default;
        clientY: typeof import("./dom/clientY").default;
        createEvent: typeof import("./dom/createEvent").default;
        domReady: typeof import("./dom/domReady").default;
        insertScript: typeof import("./dom/insertScript").default;
        isElement: typeof import("./dom/isElement").default;
        isInViewport: typeof import("./dom/isInViewport").default;
        isWindow: typeof import("./dom/isWindow").default;
        pageX: typeof import("./dom/pageX").default;
        pageY: typeof import("./dom/pageY").default;
        scrollTo: typeof import("./dom/scrollTo").default;
        scrollX: typeof import("./dom/scrollX").default;
        scrollY: typeof import("./dom/scrollY").default;
        viewport: typeof import("./dom/viewport").default;
    };
    easing: {
        cubicBezier: typeof import("./easing/cubicBezier").default;
        ease: (x: number) => number;
        easeIn: (x: number) => number;
        easeInOut: (x: number) => number;
        easeOut: (x: number) => number;
        linear: (x: number) => number;
    };
    emitter: {
        Emitter: typeof import("./emitter/Emitter").default;
        create: typeof import("./emitter/create").default;
        emit: any;
        getListeners: any;
        off: any;
        on: any;
        once: any;
    };
    lang: {
        isArray: import("./_internal/isType").ToStringFunc;
        isBoolean: import("./_internal/isType").ToStringFunc;
        isDate: import("./_internal/isType").ToStringFunc;
        isError: import("./_internal/isType").ToStringFunc;
        isFunction: (o: any) => boolean;
        isNil: (o: any) => boolean;
        isNull: (o: any) => boolean;
        isNumber: import("./_internal/isType").ToStringFunc;
        isObject: import("./_internal/isType").ToStringFunc;
        isRegExp: import("./_internal/isType").ToStringFunc;
        isString: import("./_internal/isType").ToStringFunc;
        isUndefined: (o: any) => boolean;
    };
    path: {
        basename: (path: string, ext?: string, sep?: string) => string;
        dirname: (path: string, sep?: string) => string;
        extname: (path: string) => string;
    };
    qs: {
        get: typeof import("./qs/get").default;
        parse: typeof import("./qs/parse").default;
        stringify: typeof import("./qs/stringify").default;
    };
    regex: {
        ascii: RegExp;
        decimal: RegExp;
        digit: RegExp;
        domain: RegExp;
        email: RegExp;
        hexColor: RegExp;
        hsl: RegExp;
        hsla: RegExp;
        integer: RegExp;
        ipv4: RegExp;
        ipv6: RegExp;
        isAscii: (string: string) => boolean;
        isDecimal: (string: string) => boolean;
        isDigit: (string: string) => boolean;
        isDomain: (string: string) => boolean;
        isEmail: (string: string) => boolean;
        isHexColor: (string: string) => boolean;
        isHsl: (string: string) => boolean;
        isHsla: (string: string) => boolean;
        isInteger: (string: string) => boolean;
        isIP: (string: string) => boolean;
        isIPv4: (string: string) => boolean;
        isIPv6: (string: string) => boolean;
        isQQ: (string: string) => boolean;
        isRealNumber: (string: string) => boolean;
        isRgb: (string: string) => boolean;
        isRgba: (string: string) => boolean;
        qq: RegExp;
        realNumber: RegExp;
        rgb: RegExp;
        rgba: RegExp;
    };
    string: {
        countChars: typeof import("./string/countChars").default;
        countLines: (text: string, newline?: string) => number;
        escapeRegexp: typeof import("./string/escapeRegexp").default;
        firstChar: (str: string) => string;
        isValidJSON: typeof import("./string/isValidJSON").default;
        lastChar: (str: string) => string;
        truncate: typeof import("./string/truncate").default;
    };
    ua: {
        isAndroid: (ua: string) => boolean;
        isIOS: (ua: string) => boolean;
        isIPad: (ua: string) => boolean;
        isIPhone: (ua: string) => boolean;
        isLinux: (ua: string) => boolean;
        isMacOS: (ua: string) => boolean;
        isMobile: (ua: string) => boolean;
        isTablet: (ua: string) => boolean;
        isWeChat: (ua: string) => boolean;
        isWindows: (ua: string) => boolean;
    };
    url: {
        isAbsolute: typeof import("./url/isAbsolute").default;
        parse: typeof import("./url/parse").default;
        stringify: typeof import("./url/stringify").default;
    };
    ajax: typeof ajax;
    css: typeof css;
    delay: typeof delay;
    jsonp: typeof jsonp;
    md5: typeof md5;
    noop: typeof noop;
    numberFormat: typeof numberFormat;
    raf: typeof raf;
    randomString: typeof randomString;
    uuid: typeof uuid;
};
export default _default;
